//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WcfServiceClient2.ServiceReference2 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference2.ICallbackCalculator", CallbackContract=typeof(WcfServiceClient2.ServiceReference2.ICallbackCalculatorCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface ICallbackCalculator {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICallbackCalculator/Factorial")]
        void Factorial(double n);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICallbackCalculator/Factorial")]
        System.Threading.Tasks.Task FactorialAsync(double n);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICallbackCalculator/CalcSomething")]
        void CalcSomething(int sek);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICallbackCalculator/CalcSomething")]
        System.Threading.Tasks.Task CalcSomethingAsync(int sek);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICallbackCalculatorCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICallbackCalculator/FactorialCB")]
        void FactorialCB(double result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICallbackCalculator/CalcSomethingCB")]
        void CalcSomethingCB(string result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICallbackCalculatorChannel : WcfServiceClient2.ServiceReference2.ICallbackCalculator, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CallbackCalculatorClient : System.ServiceModel.DuplexClientBase<WcfServiceClient2.ServiceReference2.ICallbackCalculator>, WcfServiceClient2.ServiceReference2.ICallbackCalculator {
        
        public CallbackCalculatorClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public CallbackCalculatorClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public CallbackCalculatorClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public CallbackCalculatorClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public CallbackCalculatorClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Factorial(double n) {
            base.Channel.Factorial(n);
        }
        
        public System.Threading.Tasks.Task FactorialAsync(double n) {
            return base.Channel.FactorialAsync(n);
        }
        
        public void CalcSomething(int sek) {
            base.Channel.CalcSomething(sek);
        }
        
        public System.Threading.Tasks.Task CalcSomethingAsync(int sek) {
            return base.Channel.CalcSomethingAsync(sek);
        }
    }
}
