//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WcfServiceClient.ServiceReference2 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference2.ICalculator")]
    public interface ICalculator {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Deposit", ReplyAction="http://tempuri.org/ICalculator/DepositResponse")]
        double Deposit(double n1);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Deposit", ReplyAction="http://tempuri.org/ICalculator/DepositResponse")]
        System.Threading.Tasks.Task<double> DepositAsync(double n1);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Withdraw", ReplyAction="http://tempuri.org/ICalculator/WithdrawResponse")]
        double Withdraw(double n1);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Withdraw", ReplyAction="http://tempuri.org/ICalculator/WithdrawResponse")]
        System.Threading.Tasks.Task<double> WithdrawAsync(double n1);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Show", ReplyAction="http://tempuri.org/ICalculator/ShowResponse")]
        double Show();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Show", ReplyAction="http://tempuri.org/ICalculator/ShowResponse")]
        System.Threading.Tasks.Task<double> ShowAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalculatorChannel : WcfServiceClient.ServiceReference2.ICalculator, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalculatorClient : System.ServiceModel.ClientBase<WcfServiceClient.ServiceReference2.ICalculator>, WcfServiceClient.ServiceReference2.ICalculator {
        
        public CalculatorClient() {
        }
        
        public CalculatorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalculatorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double Deposit(double n1) {
            return base.Channel.Deposit(n1);
        }
        
        public System.Threading.Tasks.Task<double> DepositAsync(double n1) {
            return base.Channel.DepositAsync(n1);
        }
        
        public double Withdraw(double n1) {
            return base.Channel.Withdraw(n1);
        }
        
        public System.Threading.Tasks.Task<double> WithdrawAsync(double n1) {
            return base.Channel.WithdrawAsync(n1);
        }
        
        public double Show() {
            return base.Channel.Show();
        }
        
        public System.Threading.Tasks.Task<double> ShowAsync() {
            return base.Channel.ShowAsync();
        }
    }
}
